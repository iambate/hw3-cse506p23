READ ME  GROUP:23----------------------------------------------------------------------
1. Sagar Shah (110958554)
2. Kunal Shah (110974215)
3. Swetambari Verma (110932325)
4. Swatilekha Chaudhary (110949398)

Linux prohibits a loadable module from changing the global system call
vector/table.  Linux makes it hard to change system calls, either globally
or on a per process (or process group) basis.  Having different syscalls per
process is useful for various scenarios.Our purpose is to have a different set of syscalls on per process basis.

---------------
BUILD STEPS AND IMPORTANT FILES:
1. cd /usr/src/hw3-cse506p23/ (source folder)
2. cp -f hw3/kernel.config .config
3. make; make modules_install; make install
4. reboot
5. cd /usr/src/hw3-cse506p23/hw3; make
	sh install_module.sh
		- it installs sys_clone2.ko module
		- sys_clone.ko module contains functionality of clone2 system call
	insmod module_1.ko
		- module_1.ko contains two vectors having new of definition of few system calls
		- After insmod, both the system vectors will be registered and each of them will be assigned a unique ID
		  which we call vector_id
	insmod module_2.ko
		- module_2.ko contains two vectors having new of definition of few system calls
		- After insmod, both the system vectors will be registered and each of them will be assigned a unique ID
		  which we call vector_id
	./test_clone
	./test2_clone
		- These are user programs that showcase the functionality of clone and clone2 syscalls
	./ioctl getall
		- Print all the available vector table along with its reference count
	./ioctl <pid> <vector_id>
		- Set the vector table of process with pid <pid> to vector table having vector id <vector_id>

----------------
IMPORTANT FILES IN MAIN KERNEL:
1. include/linux/vector_table.h
	This is a new file that contains all the prototype of function and structure that provide the functionality
	to provide a platform for multiple syscalls

2. kernel/vector_table.c
	This is a new file that implementation of all functions that are defined in vector_table.h

3. fs/ioctl.c
	This file is changed to support additional flags by ioctl to getall vectors and its details,
	get vector of particular process and to set a particular process to one of the availble vector id

4. fs/read_write.c
	This file was changed to change the main read & write system call to provide wrapper functionality
	that decides which implementation of read & write should be called respectively
	corresponding to vector table of calling process

5. fs/readdir.c
	This file was changed to change the main getdents & getdents64 system call to provide wrapper functionality
	that decides which implementation of getdents & getdents64 should be called respectively
	corresponding to vector table of calling process

6. fs/namei.c
	This file was changed to change the main mkdir, rmdir, link & unlink system call to provide wrapper functionality
	that decides which implementation of mkdir, rmdir, link & unlink should be called respectively
	corresponding to vector table of calling process

7. include/linux/sched.h
	This file was changed to change the definition of task_struct to make it contain additional member that gives vector_table
	info. It now also contains locks that are needed to access this vector_table.

8. include/linux/init_task.h
	This file was changed to change the initailization of task for process INIT

9. fs/open.c
	This file was changed to change the main open & close system call to provide wrapper functionality
	that decides which implementation of open & close should be called respectively
	corresponding to vector table of calling process

----------------
Top level design, implementation and extension
	The design is similar to vfs. Our design provides abstraction of what implementation of syscall
	needs to be called. Process may have different vector_table which means that a single read call will
	perform different kind of operation depending on which process is calling. To achieve this we changed the default
	functionality of syscall to only decide which implementation read to call depending on vector_table/vector_id of process.
	This function is called sys_$(operation)_wrapper. The kernel code is changed to call this function when user process
	interrupts to get a service for this operation. E.g. when a user process call read(2), the system will be interrupted to
	call sys_read_wrapper. The function sys_read_wrapper will decide which implementation of read to call. When vector_table
	of any process is default or vector_id is zero, then the old implementation of read is called else the implementation of that
	corresponding vector_table is called.

	The old implementation of syscall is exported as sys_$(operation) i.e. old implemenation of read is exported as sys_read. 
	task_struct is made a contain an additional member vt that is a struct vector_table pointer. Struct vector_table is defined
	below. The sys_$(operation)_wrapper will check vt of the calling process to decide the implementaion of $(operation) to call.
	When vector_table is set to default or vector_id is zero, vt in task_struct is NULL and will call default/old implementation.

	After resigtration that vector table is available to used by any process. Any process can change its vector table to new
	vector using ioctl syscall or using clone2 syscall. By default, child process will inherit the vector_table of parent.

	Vector table are defined in a module and resigtered.  Each module may contain more than one vector table. Whenever any process
	any vector_table, its rc is increamented. We cannot uninstall the module if any process is using any of the vector_table defined
	in that module. New module and vector can be added dynamically.
 
	This design decision was made so as to provide abstraction, polymorphism in the same way as vfs. The changes needed are small with
	this design and it supports addition of any number of vector_table and any number of different implemenation of system calls.

	For now, we have shown that our design works for ten system calls. We can use the same design to make it work for all syscalls

----------------
IOCTL
	Added multiple CASEs to "do_vfs_ioctl" function in /fs/ioctl.c.
	IOCTL IMPLEMENTATION

	./ioctl getall     
		- List all the vector tables with their IDs and Reference Counts.
			"GET_FLAG" passed as ioctl system call parameter.
			All the vector tables are listed through get_vt_id_list() function in kernel/vector_table.c.

	./ioctl get <process ID>
		- List the corresponding vector table ID of the provided Process ID.
			"GET_VT" passed as ioctl system call parameter.


	./ioctl <Process ID> <Vector Table ID>
		- Assign the Process ID to the Vector Table ID.
			"SET_FLAG" passed as ioctl system call parameter.
			Verifies if the process is already assigned to the entered vector table ID 
				through getvtbytask(struct task_struct *tsk) function in kernel/vector_table.c.
			If not, assigns the process ID to the corresponding vector table ID
				through change_vt function in kernel/vector_table.c.

	Error Handled for Invalid Arguments:
		- Incorrect number of arguments
		- Invalid Process IDs
		- Invalid Vector Table IDs


---------------------
Loadable Modules Design, Implementation and Extension

	Vector Table Node Design:

		Members:
			a. id:
				- Vector id is stored in this member
				- This member is integer as PID is INT and id shouldn't greater than PID
			b. rc:
				- reference count of vector is stored in this vector
				- This is of type atomic64_t
					- atomic is used as reference count should be incremented/decremented 
					atomically by the system
					- 64 because system can support at max that many processes

				- this is incremented when the process uses this vector for its functionality
				and decreased when it changes to other vector or it terminates.
			c. vt_list:
				- this is the reference to head of list mantaining all the vectors
				- there was a need to mantain list of all the system call vectors.
				- the best way to mantain list in kernel is using list_head and thus we also
				have this as list_head
			d. sys_map_size:
				- this mantains the number of system_calls which are customized
				- this is require for iterating over the next member mentioned here
			e. sys_map:
				- this is pointer to the sys_map array dynamically allocated by the Module
				Developer in the module

				- This will reduce the overall structure size of vector table node by great
				extent and thus we can have better efficiency in fetching to cache and will also
				reduce process stack size by lot.

				- This being just a reference, will require the number of elements to iterate
				over array and thus above mentioned member is required

				- Allowing this structure to be dynamically allocated supports ease in extension
				for support of other systems calls thus supporting the iterative model of development
				used in industry

				- This is one of the reasons for enabling feature of supporting multiple vectors in a module
			f. module_ref:
				- this variable is required to mantain the reference count of the modules
				used by various processes and thus preventing the removal of the module using rmmod
				in case a process is using any vector of the module.

				- process increases the reference count of the module using this member whenever
				a vector id is referenced for its execution and decremented when it changes to
				other vector id or terminates.

				- proecess when newly created with the vector id increments the reference count of module.
	sys_vect Design:

		Members:
			a. sys_no:
				- This member saves the sys_call number which is customized
				i.e. don't have to use its default implementation
			b. sys_func:
				- this member is NULL if this sys_call should not be allowed 
				to execute(denied functionality).
				- this memeber contains function pointer to the custom function which has same
				prototype as the default system call
				- this member is void pointer as it can support any function pointer
				- it will be used after typecasting as required by particular system call
			c. Note:
				1. Don't add sys_call numbers which needs to implement by default
				2. if the system call number is not present it is considered default system 
				call needs to be executed
		
		Design Decisions:
			- Function Pointers is used for following reasons
				- Ease in switching the functionality of a system call just need to change in module
				thus great for extension or overhaul in case of future

				- reduces the overhead while calling any function on fly as no mapping is required 
				to particular module

				- supports the complete namespace i.e. doesn't depend on whether a function with
				similar name is defined by other module or no.

				- this will help if other module needs to use a function of other module as well as
				this is supported by linux itself.

			- this type of design leads to less size of the sys_map array overall and thus while deciding 
			on fly whether to call the default or custom function in quite less time considering any user 
			of this functionality will always modify minority of the total system calls supported by OS.

	Steps for New Module Developer (Advisable steps):
		1.  Create New Custom Defined Functions
		2.	Create a function to register a system vector
				a. Allocate Memory for the Vector Table Node (struct vector_table) referred as VTN ahead
				b. Fill in the contents of VTN
						- Allocate memory for VTN->sys_map according as per the Number of 
						system calls which are customized(new overridden syscalls / sys_calls
						that are to be denied)
						- Fill in the sys_map for a particular sys_call with the sys_call
						number and function pointer to  newly defined or NULL if need to be denied
						- Add module reference pointer
				c. call API function "register_vt"
		3. Registering of Module should create all the system call vectors required by the developer
		4. Deregistering of Module should delete all system call vectors
				a. call API function "deregister_vt"
				b. Free the VTN->sys_map for each system call vector 
				c. Free the VTN for all system call vector
		5. Note:
				Developer can create a general function for deleting and deregistering for any number of 
		sys_call vectors irrespective of design thus reducing developers effort as well as keeping code modular.

---------------------
CLONE/CLONE2

CLONE:

The behavior of clone is as follows:

a) By Default, the child inherits the parent's vector table
b) To change this default behavior and make it point to the default syscall_table(Vector id: 0),call clone with CLONE_SYSCALLS set

To implement this, __do_fork was changed to support the flag and default behavior,hence "make" at kernel level is required before testing:

	Call as: syscall(__NR_clone, SIGCHLD|CLONE_SYSCALLS,0,NULL,NULL,0);

CLONE2:

a) To make the child point to some other vector table, clone2 is called with the last parameter being the vector table id to be set

Clone2 is implemented as a module:
Steps to use the module:

Inside hw3-cse506p23/hw3
1. make clean
2. make
3. sh install_module
4. insmod module_1.ko(the vector_table module)

clone2

        call as :  syscall(__NR_clone2, SIGCHLD , 0, NULL, NULL, 0, new_vt_id); (where new_vt_id is the vector_table id(number) to be set) 
	Sample clone call in xhw3.c

-----------------------
LOCKING
The following locking semantics gaurantees that there is no race condition and deadlocks with no delay:
        * Every Task has lock(task_vt_lock) that we use as follows
		This lock is taken whenever task want to access(read, write, change) it vt pointer

                i. Every system call by that task takes read lock whenever
		   it access vt to figure out current vector_table's system call function
                ii. Every change_vt (change the vector table of this task/process) takes write lock
                iii. We take write lock in dec_rc_vt (on exit of process)
                iv. We take read lock in sys_getvtbyid (get current task's vector ID)
                v. We take read lock in getvtbytask (get given task's vector ID)

        * list of vector table has lock (vt_lock) that we use as follows
		This lock is taken whenever list of vector table is accessed
		(iteration though list for reading all member or for deletion)
		This lock is not to be taken if we already have a pointer to vector_table i.e.
		read or writing to node of list of vector table doesn't need this lock

                i. We take write lock on register_vt (Add new vector_table) and
		   deregister_vt (Remove exisiting vector_table) operation
                ii. We take read lock after taking task_vt_lock when doing
		    change_vt (change the vector table of this task/process)
                iii. We take read lock in get_vt( get vector table having given ID) operaion,
		    get_vt_id_list (get info of all vector table)

        * task_vt_lock is taken before vt_lock (This order ensures no deadlock)
	* The only element that is written to in vector_table is rc and that is atomic64
		rc is incremented when process is assigned that particular vector and
		decremented when process is deassigned or when process is exiting


-------------------
Technical Process Flow:

	a) Process using Default Vector:
		a. process is created with default vector if new process and not a child process
		b. calls a sys_call
		c. sys_call_wrapper is called
		d. is_implemented_by_vt is called
		e. is_implemented_by_vt returns 0
		f. calls a sys_call default function
		g. default sys_call returns a value 
		h. sys_call_wrapper returns above value
		i. process receives appropriate return value
		j. on process exit dec_rc_vt is called

	b) Process using a vector id (vector id is assigned using ioctl program &/ clone or clone2 sys_call)
		a. calls a sys_call
		b. sys_call_wrapper is called
		c. is_implemented_by_vt is called
		d. is_implemented_by_vt returns positive id i.e. index of sys_map array or negative incase of error
or Zero if default implementation to be used
		e. calls a sys_call default function / custom function based on return of the is_implemented_by_vt
		f. default sys_call/ custom function returns a value 
		g. sys_call_wrapper returns above value
		h. process receives appropriate return value
		i. on process exit dec_rc_vt is called

-------------------
SPECIAL BEHAVIOR

