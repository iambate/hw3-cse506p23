READ ME  GROUP:23----------------------------------------------------------------------
1. Sagar Shah (110958554)
2. Kunal Shah ()
3. Swetambari Verma (110932325)
4. Swatilekha Chaudhary ()

Linux prohibits a loadable module from changing the global system call
vector/table.  Linux makes it hard to change system calls, either globally
or on a per process (or process group) basis.  Having different syscalls per
process is useful for various scenarios.Our purpose is to have a different set of syscalls on per process basis.

---------------
BUILD STEPS AND IMPORTANT FILES:
1. cd /usr/src/hw3-cse506p23/ (source folder)
2. cp -f hw3/kernel.config .config
3. make; make modules_install; make install
4. reboot
5. cd /usr/src/hw3-cse506p23/hw3
	sh install_module.sh
		- it installs sys_clone2.ko module
		- sys_clone.ko module contains functionality of clone2 system call
	insmod module_1.ko
		- module_1.ko contains two vectors having new of definition of few system calls
		- After insmod, both the system vectors will be registered and each of them will be assigned a unique ID
		  which we call vector_id
	insmod module_2.ko
		- module_2.ko contains two vectors having new of definition of few system calls
		- After insmod, both the system vectors will be registered and each of them will be assigned a unique ID
		  which we call vector_id
	./test_clone
	./test2_clone
		- These are user programs that showcase the functionality of clone and clone2 syscalls
	./ioctl getall
		- Print all the available vector table along with its reference count
	./ioctl <pid> <vector_id>
		- Set the vector table of process with pid <pid> to vector table having vector id <vector_id>

----------------
VECTOR TABLE AND
IOCTL




---------------------
REGISTER AND DE-REGISTER






-------------------------
EXTENDED SYSTEM CALLS
--System Call Wrapping
--System Call Inheritance




------------------------
CLONE/CLONE2

CLONE:

The behavior of clone is as follows:

a) By Default, the child inherits the parent's vector table
b) To change this default behavior and make it point to the default syscall_table(Vector id: 0),call clone with CLONE_SYSCALLS set

To implement this, __do_fork was changed to support the flag and default behavior,hence "make" at kernel level is required before testing:

	Call as: syscall(__NR_clone, SIGCHLD|CLONE_SYSCALLS,0,NULL,NULL,0);

CLONE2:

a) To make the child point to some other vector table, clone2 is called with the last parameter being the vector table id to be set

Clone2 is implemented as a module:
Steps to use the module:

Inside hw3-cse506p23/hw3
1. make clean
2. make
3. sh install_module
4. insmod module_1.ko(the vector_table module)

clone2

        call as :  syscall(__NR_clone2, SIGCHLD , 0, NULL, NULL, 0, new_vt_id); (where new_vt_id is the vector_table id(number) to be set) 
	Sample clone call in xhw3.c

-----------------------
LOCKING
The following locking semantics gaurantees that there is no race condition and deadlocks with no delay:
        * Every Task has lock(task_vt_lock) that we take and release as follows
                i. Every system call by that task takes read lock whenever
		   it access vt to figure out current vector_table's system call function
                ii. Every change_vt (change the vector table of this task/process) takes write lock
                iii. We take write lock in dec_rc_vt (on exit of process)
                iv. We take read lock in sys_getvtbyid (get current task's vector ID)
                v. We take read lock in getvtbytask (get given task's vector ID)
        * The vt_lock will be used as follows
                i. We take write lock on register_vt (Add new vector_table) and
		   deregister_vt (Remove exisiting vector_table) operation
                ii. We take read lock after taking task_vt_lock when doing
		    change_vt (change the vector table of this task/process)
                iii. We take read lock in get_vt( get vector table having given ID) operaion,
		    get_vt_id_list (get info of all vector table)
        * task_vt_lock is taken before vt_lock (This order ensures no deadlock)

-------------------
SPECIAL BEHAVIOR

